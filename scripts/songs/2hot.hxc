import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.util.HapticUtil;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.Preferences;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import funkin.play.stage.StageProp;
import funkin.save.Save;
import funkin.ui.FullScreenScaleMode;

import funkin.data.song.SongRegistry;

// We have to use FlxBasePoint in scripts because FlxPoint is inlined and not available in scripts
class TwoHOTSong extends Song {
	var hasPlayedIntroCutscene:Bool = false;
	var hasPlayedEndingCutscene:Bool = false;
	// var tempConductor:Conductor;
	var cutsceneMusic:FunkinSound;

	var canDamageVibrationPreset:VibrationPreset = {
		period: 0.1,
		duration: 0.1,
		amplitude: 1,
		sharpness: 1
	};

	function new() {
		super('2hot');

		hasPlayedIntroCutscene = false;
		hasPlayedEndingCutscene = false;
	}

	/**
	 * Health lost when hit by can.
	 */
	var HEALTH_LOSS = 0.25 * 2;

	public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		if (showLocked || Save.instance.hasBeatenLevel('weekend1')) {
			return super.listDifficulties(variationId, variationIds);
		}

		// Hide all difficulties if the player has not beaten the week.
		return [];
	}

	public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);

		if (!hasPlayedIntroCutscene)
		{
			hasPlayedIntroCutscene = true;

			PlayState.instance.camHUD.visible = false;
			event.cancel(); // CANCEL THE COUNTDOWN!
			introCutscene();
		}
	}

	function onSongRetry(event:ScriptEvent) {
		super.onSongRetry(event);

		removeCans();
		gunCocked = false;
	}

	public override function onSongEnd(event:CountdownScriptEvent):Void {
		super.onSongEnd(event);
		if (!PlayStatePlaylist.isStoryMode)
			hasPlayedEndingCutscene = true;

		if (!hasPlayedEndingCutscene) {
			PlayState.instance.isInCutscene = true;
			PlayState.instance.mayPauseGame = false;
			hasPlayedEndingCutscene = true;

			event.cancel();

			// start the video cutscene and hide it so the other stuff can happen after
			startCutscene();
		} else {
			// Make sure the cutscene can play again next time!
			hasPlayedEndingCutscene = false;
			PlayState.instance.isInCutscene = false;
			PlayState.instance.mayPauseGame = true;
			// DO NOT CANCEL THE EVENT!
		}
	}

	function introCutscene() {
		if (currentStage.getBoyfriend() == null)
		{
			trace('No BF to focus on. Cutscene won\'t work properly. Skipping...');
			PlayState.instance.startCountdown();
			return;
		}

		if (currentStage.getDad() == null)
		{
			trace('No dad to focus on. Cutscene won\'t work properly. Skipping...');
			PlayState.instance.startCountdown();
			return;
		}
		if (currentStage.getGirlfriend() == null)
		{
			trace('No GF to focus on. Cutscene won\'t work properly. Skipping...');
			PlayState.instance.startCountdown();
			return;
		}

		PlayState.instance.togglePauseButton();
		PlayState.instance.isInCutscene = true;
		PlayState.instance.mayPauseGame = false;

		var picoPos:Array<Float> = [
			PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.x,
			PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.y
		];
		var nenePos:Array<Float> = [
			PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.x,
			PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.y
		];
		var darnellPos:Array<Float> = [
			PlayState.instance.currentStage.getDad().cameraFocusPoint.x,
			PlayState.instance.currentStage.getDad().cameraFocusPoint.y
		];

		var cutsceneDelay:Float = 2;

		cutsceneMusic = FunkinSound.load(Paths.music("darnellCanCutscene/darnellCanCutscene", "weekend1"), true);
		cutsceneMusic.volume = 1;

		cutsceneConductor = new Conductor();

		var songMusicData:Null<SongMusicData> = SongRegistry.instance.parseMusicData('darnellCanCutscene');
		if (songMusicData != null) {
			cutsceneConductor.mapTimeChanges(songMusicData.timeChanges);
		}

		cutsceneConductor.onBeatHit.add(onCutsceneBeatHit);

		var cutsceneCan:FunkinSprite = FunkinSprite.createSparrow(darnellPos[0], darnellPos[1], 'wked1_cutscene_1_can');
		cutsceneCan.animation.addByPrefix('forward', "can kick quick0", 24, false);
		cutsceneCan.animation.addByPrefix('up', "can kicked up0", 24, false);
		PlayState.instance.currentStage.add(cutsceneCan);
		cutsceneCan.visible = false;

		var spraycanPile = PlayState.instance.currentStage.getNamedProp('spraycanPile');
		cutsceneCan.x = spraycanPile.x + 30;
		cutsceneCan.y = spraycanPile.y - 320;
		cutsceneCan.zIndex = spraycanPile.zIndex - 1;
		cutsceneCan.shader = PlayState.instance.currentStage.getDad().shader;
		PlayState.instance.currentStage.refresh();

		var newCan:ScriptedFlxAtlasSprite = ScriptedFlxAtlasSprite.init('SpraycanAtlasSprite', 0, 0);
		var spraycanPile = PlayState.instance.currentStage.getNamedProp('spraycanPile');
		newCan.x = spraycanPile.x - 430;
		newCan.y = spraycanPile.y - 840;
		newCan.zIndex = 300;
		PlayState.instance.currentStage.add(newCan);
		PlayState.instance.currentStage.refresh();
		newCan.visible = false;

		PlayState.instance.currentStage.getBoyfriend().playAnimation('intro1', true);

		// camera sets up, pico does his animation showing him pissed
		new FlxTimer().start(0.1, function(tmr) {
			PlayState.instance.tweenCameraToPosition(picoPos[0] + 250, picoPos[1], 0);

			PlayState.instance.tweenCameraZoom(1.3, 0, true, FlxEase.quadInOut);
		});

		new FlxTimer().start(0.7, function(tmr) {
			cutsceneMusic.play(false);
			if (PlayStatePlaylist.isStoryMode) {
				FlxTween.tween(bgSprite, {alpha: 0}, 2, {startDelay: 0.3}, function() {
					bgSprite.visible = false;
				});
			}
		});

		// move camera out to show everything
		new FlxTimer().start(cutsceneDelay, function(tmr) {
			PlayState.instance.tweenCameraToPosition(darnellPos[0] + 100, darnellPos[1], 2.5, FlxEase.quadInOut);
			PlayState.instance.tweenCameraZoom(0.66, 2.5, true, FlxEase.quadInOut);
		});

		// darnell lights up a can
		new FlxTimer().start(cutsceneDelay + 3, function(tmr) {
			PlayState.instance.currentStage.getDad().playAnimation('lightCan', true);
			FunkinSound.playOnce(Paths.sound('Darnell_Lighter'), 1.0);
		});

		// pico cocks his gun, camera shifts to his side to show this
		new FlxTimer().start(cutsceneDelay + 4, function(tmr) {
			if (PlayState.instance.currentVariation != 'bf') {
				PlayState.instance.currentStage.getBoyfriend().playAnimation('cock', true);
				FunkinSound.playOnce(Paths.sound('Gun_Prep'), 1.0);
			}
			PlayState.instance.tweenCameraToPosition(darnellPos[0] + 180, darnellPos[1], 0.4, FlxEase.backOut);
		});

		// darnell kicks the can up
		new FlxTimer().start(cutsceneDelay + 4.4, function(tmr) {
			PlayState.instance.currentStage.getDad().playAnimation('kickCan', true);
			FunkinSound.playOnce(Paths.sound('Kick_Can_UP'), 1.0);
			cutsceneCan.animation.play('up');
			cutsceneCan.visible = true;
		});

		// darnell knees the can forward
		new FlxTimer().start(cutsceneDelay + 4.9, function(tmr) {
			PlayState.instance.currentStage.getDad().playAnimation('kneeCan', true);
			FunkinSound.playOnce(Paths.sound('Kick_Can_FORWARD'), 1.0);
			cutsceneCan.animation.play('forward');

			if (PlayState.instance.currentVariation == 'bf') {
				FlxTween.tween(cutsceneCan, {x: 6400}, 1.5);
			}
		});

		// pico shoots the can, it explodes
		new FlxTimer().start(cutsceneDelay + 5.1, function(tmr) {
			PlayState.instance.tweenCameraToPosition(darnellPos[0] + 100, darnellPos[1], 1, FlxEase.quadInOut);

			if (PlayState.instance.currentVariation != 'bf') {
				PlayState.instance.currentStage.getBoyfriend().playAnimation('intro2', true, true);

				FunkinSound.playOnce(Paths.soundRandom('shot', 1, 4));

				newCan.scriptCall('playCanShot');
				new FlxTimer().start(1 / 24, function(tmr) {
					darkenStageProps();
				});
			} else {
				PlayState.instance.currentStage.getBoyfriend().playAnimation('dodge');
			}

			newCan.visible = (PlayState.instance.currentVariation != 'bf');
			cutsceneCan.visible = false;
		});

		// darnell laughs
		new FlxTimer().start(cutsceneDelay + 5.9, function(tmr) {
			if (PlayState.instance.currentVariation == 'bf') {
				PlayState.instance.currentStage.getBoyfriend().playAnimation('idle');
			}
			PlayState.instance.currentStage.getDad().playAnimation('laughCutscene', true);
			FunkinSound.playOnce(Paths.sound('cutscene/darnell_laugh'), 0.6);
		});

		// nene spits and laughs
		new FlxTimer().start(cutsceneDelay + 6.2, function(tmr) {
			if (PlayState.instance.currentVariation != 'bf') {
				PlayState.instance.currentStage.getGirlfriend().playAnimation('laughCutscene', true);
				FunkinSound.playOnce(Paths.sound('cutscene/nene_laugh'), 0.6);
			}
		});

		// camera returns to normal, cutscene flags set and countdown starts.
		new FlxTimer().start(cutsceneDelay + 8, function(tmr) {
			PlayState.instance.tweenCameraZoom(0.77, 2, true, FlxEase.sineInOut);
			PlayState.instance.tweenCameraToPosition(darnellPos[0] + 180, darnellPos[1], 2, FlxEase.sineInOut);
			PlayState.instance.isInCutscene = false;
			PlayState.instance.startCountdown();
			cutsceneMusic.stop(); // stop the music!!!!!!

			PlayState.instance.togglePauseButton(true);
			PlayState.instance.isInCutscene = false;
			PlayState.instance.mayPauseGame = true;
		});
	}

	function onCutsceneBeatHit() {
		// Play idle if Darnell isn't busy.
		if (PlayState.instance.currentStage.getDad().isAnimationFinished()
			&& PlayState.instance.currentStage.getDad().getCurrentAnimation() != 'lightCan') {
			PlayState.instance.currentStage.getDad().dance(true);
		}

		if (PlayState.instance.currentStage.getGirlfriend().isAnimationFinished()) {
			PlayState.instance.currentStage.getGirlfriend().dance(true);
		}

		if (PlayState.instance.currentStage.getBoyfriend().isAnimationFinished() && PlayState.instance.currentVariation == 'bf') {
			PlayState.instance.currentStage.getBoyfriend().dance(true);
		}
	}

	// the Other stuff
	function endCutscene() {
		VideoCutscene.onVideoStarted.removeAll();
		VideoCutscene.hideVideo();

		new FlxTimer().start(1, function(tmr) {
			PlayState.instance.tweenCameraToPosition(1539, 833.5, 2, FlxEase.quadInOut);
			PlayState.instance.tweenCameraZoom(0.69, 2, true, FlxEase.quadInOut);
		});

		new FlxTimer().start(2, function(tmr) {
			PlayState.instance.currentStage.getBoyfriend().playAnimation('intro1', true, true);
			if (FlxG.onMobile) {
				FlxTween.tween(PlayState.instance.pauseButton,
					{x: (FlxG.width - PlayState.instance.pauseButton.width) - (40 + (FullScreenScaleMode.gameCutoutSize.x / 2))}, 3.0,
					{ease: FlxEase.quintOut});
			}
			FullScreenScaleMode.addCutouts(3.0, FlxEase.quintOut);
		});
		new FlxTimer().start(2.5, function(tmr) {
			PlayState.instance.currentStage.getDad().playAnimation('pissed', true, true);
		});

		new FlxTimer().start(6, function(tmr) {
			// video would play around here
			// PlayState.instance.endSong(true);

			trace('Pausing ending to play a video cutscene (`2hot`)');

			// Add a black background behind the cutscene to fix a transition bug!
			trace('Adding black background behind cutscene over UI');
			var bgSprite = new FunkinSprite(-100, -100);
			bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
			bgSprite.cameras = [PlayState.instance.camHUD]; // Show over the HUD.
			bgSprite.zIndex = 1000000;
			PlayState.instance.add(bgSprite);
			PlayState.instance.refresh();

			VideoCutscene.showVideo();
		});
	}

	function startCutscene() {
		VideoCutscene.onVideoStarted.add(endCutscene);
		VideoCutscene.onVideoEnded.addOnce(function() {
			if (FlxG.onMobile) {
				PlayState.instance.pauseButton.x = (FlxG.width - PlayState.instance.pauseButton.width) - Math.max(40, FullScreenScaleMode.gameNotchSize.x);
			}
			FullScreenScaleMode.removeCutouts();
		});

		PlayState.instance.camHUD.visible = false;

		PlayState.instance.isInCutscene = true;
		hasPlayedEndingCutscene = true;

		PlayState.instance.currentStage.getBoyfriend().danceEvery = 0;
		PlayState.instance.currentStage.getDad().danceEvery = 0;

		startVideo();
	}

	function startVideo() {
		VideoCutscene.play(Paths.videos('2hotCutscene'), CutsceneType.ENDING);
	}

	function removeCans() {
		for (can in spawnedCans) {
			can.kill();
		}
		spawnedCans = [];
	}

	function onStateChangeEnd(event:StateChangeScriptEvent) {
		super.onStateChangeEnd(event);

		if ((Std.isOfType(event.targetState, PlayState))) {
			return;
		}
		hardClear();
	}

	function hardClear() {
		removeCans();
		gunCocked = false;
	}

	var gunCocked:Bool = false;
	var spawnedCans:Array<ScriptedFlxAtlasSprite> = [];

	function onNoteHit(event:HitNoteScriptEvent) {
		super.onNoteHit(event);
		if (PlayState.instance.currentStage == null)
			return;

		switch (event.note.kind) {
			case "weekend-1-lightcan":
				// Do nothing, but place this such that the animation plays at the right time.
			case "weekend-1-kickcan":
				// This creates the can and starts the animation.
				// We define the behavior of the can in a separate scripted class,
				// which allows the can to track and manage its own properties.
				var newCan:ScriptedFlxAtlasSprite = ScriptedFlxAtlasSprite.init('SpraycanAtlasSprite', 0, 0);

				var spraycanPile = PlayState.instance.currentStage.getNamedProp('spraycanPile');

				newCan.x = spraycanPile.x - 430;
				newCan.y = spraycanPile.y - 840;
				newCan.zIndex = spraycanPile.zIndex - 1;

				newCan.scriptCall('playCanStart');

				PlayState.instance.currentStage.add(newCan);
				PlayState.instance.currentStage.refresh(); // Apply z-index.
				spawnedCans.push(newCan);
			case "weekend-1-kneecan":
				// Do nothing, but place this such that the animation plays at the right time.
			case "weekend-1-cockgun": // lol
				gunCocked = true;
				new FlxTimer().start(1.0, function() {
					gunCocked = false;
				});
			case "weekend-1-firegun":
				if (gunCocked) {
					trace('Firing gun!');
					shootNextCan();
				} else {
					trace('Cannot fire gun!');
					// The player cannot hit this note.
					event.cancelEvent();
				}
		}
	}

	public var STATE_ARCING:Int = 2; // In the air.
	public var STATE_SHOT:Int = 3; // Hit by the player.
	public var STATE_IMPACTED:Int = 4; // Impacted the player.

	function getNextCanWithState(desiredState:Int) {
		for (index in 0...spawnedCans.length) {
			var can = spawnedCans[index];
			var canState = can.scriptGet('currentState');

			if (canState == desiredState) {
				// Return the can we found.
				return can;
			}
		}
		return null;
	}

	function onUpdate(event:UpdateScriptEvent) {
		super.onUpdate(event);
	}

	function darkenStageProps() {
		// Darken the background, then fade it back.
		for (stageProp in PlayState.instance.currentStage.members) {
			// Determine if the stage prop is something that should be excluded from darkening.
			if (Std.isOfType(stageProp, StageProp)) {
				if (stageProp.name == "bf" || stageProp.name == "dad" || stageProp.name == "gf") // This refers to the player.
				{
					// Exclude.
					continue;
				}
			}

			// Select cans.
			if (spawnedCans.contains(stageProp)) {
				// Exclude.
				continue;
			}

			// Hacky way of selecting PicoPlayable.picoFade.
			if (stageProp.zIndex == (PlayState.instance.currentStage.getBoyfriend().zIndex - 3)) {
				// Exclude.
				continue;
			}

			// If not excluded, darken.
			stageProp.color = 0xFF111111;
			new FlxTimer().start(1 / 24, (tmr) -> {
				stageProp.color = 0xFF222222;
				FlxTween.color(stageProp, 1.4, 0xFF222222, 0xFFFFFFFF);
			});
		}
	}

	function blackenStageProps() {
		// Blacken the background (also Darnell and Nene) entirely, then restore it once the gameOverSubState is up.
		for (stageProp in PlayState.instance.currentStage.members) {
			// Determine if the stage prop is something that should be excluded from blackening.
			if (Std.isOfType(stageProp, StageProp)) {
				if (stageProp.name == "bf") // This refers to the player.
				{
					// Exclude.
					continue;
				}
			}

			// Select cans.
			if (spawnedCans.contains(stageProp)) {
				// Exclude.
				continue;
			}

			// If not excluded, blacken.
			stageProp.color = 0xFF000000;
			new FlxTimer().start(1.0, (tmr) -> {
				stageProp.color = 0xFFFFFFFF;
			});
		}
	}

	function shootNextCan() {
		var can = getNextCanWithState(STATE_ARCING);

		if (can != null) {
			can.scriptSet('currentState', STATE_SHOT);
			can.scriptCall('playCanShot');

			new FlxTimer().start(1 / 24, function(tmr) {
				darkenStageProps();
			});
		}
	}

	function missNextCan() {
		var can = getNextCanWithState(STATE_ARCING);

		if (can != null) {
			can.scriptSet('currentState', STATE_IMPACTED);
		}
	}

	function spawnImpactParticle() {
		var impactParticle = FunkinSprite.createSparrow(0, 0, 'CanImpactParticle');
		impactParticle.animation.addByPrefix('idle', 'CanImpactParticle0', 24, false);
		impactParticle.animation.play('idle');
		impactParticle.x = PlayState.instance.currentStage.getBoyfriend().x + 400;
		impactParticle.y = PlayState.instance.currentStage.getBoyfriend().y - 200;
		PlayState.instance.currentStage.add(impactParticle);

		impactParticle.animation.finishCallback = function() {
			impactParticle.kill();
		};
	}

	function onNoteMiss(event:NoteScriptEvent) {
		super.onNoteMiss(event);

		trace('Missed note on 2hot stage...' + event.note.noteData);

		switch (event.note.kind) {
			case "weekend-1-cockgun":
				event.healthChange = 0.0; // We cause health loss later.
			case "weekend-1-firegun":
				gunCocked = false;
				event.healthChange = 0.0; // We cause health loss elsewhere.
				missNextCan();
				takeCanDamage();
			case "weekend-1-firegun-hip":
				gunCocked = false;
				event.healthChange = 0.0; // We cause health loss elsewhere.
				missNextCan();
				takeCanDamage();
			case "weekend-1-firegun-far":
				gunCocked = false;
				event.healthChange = 0.0; // We cause health loss elsewhere.
				missNextCan();
				takeCanDamage();
		}
	}

	function takeCanDamage():Void {
		trace('Taking damage from can exploding!');

		PlayState.instance.health -= HEALTH_LOSS;
		// TODO: This is jank as hell! Add some better way to prevent onNoteMiss's normal health loss.
		// PlayState.instance.health += 0.0775;

		if (PlayState.instance.health <= 0) {
			trace('Died to the can! Use special death animation.');

			// Reset to standard death animation.
			GameOverSubState.musicSuffix = '-pico-explode';
			GameOverSubState.blueBallSuffix = '-pico-explode';

			if (!PlayState.instance.isPracticeMode)
				blackenStageProps();
		} else if (HapticUtil.hapticsAvailable) {
			// Can hits pico.
			HapticUtil.vibrateByPreset(canDamageVibrationPreset);

			new FlxTimer().start(0.45, function(tmr) {
				// Can explodes.
				HapticUtil.vibrateByPreset(canDamageVibrationPreset);
			});
		}
	}

	/**
	 * Replay the cutscene after leaving the song.
	 */
	function onCreate(event:ScriptEvent):Void {
		super.onCreate(event);

		hasPlayedEndingCutscene = false;
	}
}
