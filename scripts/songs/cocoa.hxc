import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import funkin.play.stage.StageProp;
import funkin.save.Save;

import funkin.play.character.CharacterType;
import funkin.play.character.CharacterDataParser;

// We have to use FlxBasePoint in scripts because FlxPoint is inlined and not available in scripts
class CocoaSong extends Song {
	var hasPlayedCutscene:Bool;

	function new() {
		super('cocoa');

		hasPlayedCutscene = false;
	}

	public override function onDestroy(event:ScriptEvent) {
		hasPlayedCutscene = false;
	}

	public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);

		if (!hasPlayedCutscene) {
			hasPlayedCutscene = true;

			switch (PlayState.instance.currentVariation) {
				case 'default', 'erect':
					PlayState.instance.camHUD.visible = false;
					event.cancel(); // CANCEL THE COUNTDOWN!
					startBFCutscene();
				case 'pico':
					PlayState.instance.camHUD.visible = false;
					event.cancel(); // CANCEL THE COUNTDOWN!
					startPicoCutscene();
			}
		} else {
			PlayState.instance.isInCutscene = false;
			PlayState.instance.disableKeys = false;
		}
	}

	function startPicoCutscene() {
		PlayState.instance.isInCutscene = true;
		PlayState.instance.disableKeys = true;
		var currentStage = PlayState.instance.currentStage;

		if (currentStage.getDad() == null) {
			trace('No dad to focus on. Cutscene won\'t work properly. Skipping...');
			PlayState.instance.startCountdown();
			return;
		}

		if (currentStage.getBoyfriend() == null) {
			trace('No dad to focus on. Cutscene won\'t work properly. Skipping...');
			PlayState.instance.startCountdown();
			return;
		}
		
		var bfPoint = currentStage.getBoyfriend().cameraFocusPoint;
		var dadPoint = currentStage.getDad().cameraFocusPoint;	

		currentStage.getDad().destroy();
		var character = CharacterDataParser.fetchCharacter('parents-christmas-cutscene');
		currentStage.addCharacter(character, CharacterType.DAD);
		currentStage.refresh();
		
		currentStage.getBoyfriend().destroy();
		var character = CharacterDataParser.fetchCharacter('pico-christmas-cutscene');
		currentStage.addCharacter(character, CharacterType.BF);
		currentStage.refresh();

		currentStage.getDad().playAnimation('intro');

		FlxTween.tween(PlayState.instance.camHUD, {alpha: 0}, 1);
		new FlxTimer().start(1, function(tmr) {
			PlayState.instance.tweenCameraZoom(currentStage.camZoom * 1.2, 2, true, FlxEase.quadInOut);
		});
		new FlxTimer().start(2, function(tmr) {
			PlayState.instance.tweenCameraToPosition(bfPoint.x + 320, bfPoint.y, 2, FlxEase.quadInOut);
		});
		new FlxTimer().start(4, function(tmr) {
			currentStage.getBoyfriend().playAnimation('burp');
			currentStage.getDad().playAnimation('ew');

			FunkinSound.playOnce(Paths.sound('pico/burp'), 1);
			PlayState.instance.tweenCameraToPosition(dadPoint.x, dadPoint.y, 4, FlxEase.quadInOut);
		});

		new FlxTimer().start(8, function(tmr) {
			trace('Begin countdown');

			new FlxTimer().start(3, function(tmr) {
				PlayState.instance.currentStage.getDad().destroy();
				var character = CharacterDataParser.fetchCharacter('parents-christmas');
				PlayState.instance.currentStage.addCharacter(character, CharacterType.DAD);
				PlayState.instance.currentStage.refresh();
			});
		
			currentStage.getBoyfriend().destroy();
			var character = CharacterDataParser.fetchCharacter('pico-christmas');
			currentStage.addCharacter(character, CharacterType.BF);
			currentStage.refresh();

			PlayState.instance.tweenCameraToPosition(dadPoint.x, dadPoint.y, 2, FlxEase.quadInOut);
			PlayState.instance.tweenCameraZoom(currentStage.camZoom * 1, 2, true, FlxEase.quadInOut);

			PlayState.instance.startCountdown();
			PlayState.instance.currentStage.getDad().playAnimation('ew');
			FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 1);
		});
	}

	function startBFCutscene() {
		PlayState.instance.isInCutscene = true;
		PlayState.instance.disableKeys = true;
		var currentStage = PlayState.instance.currentStage;

		if (currentStage.getDad() == null) {
			trace('No dad to focus on. Cutscene won\'t work properly. Skipping...');
			PlayState.instance.startCountdown();
			return;
		}
		
		currentStage.getDad().destroy();
		var character = CharacterDataParser.fetchCharacter('parents-christmas-cutscene');
		currentStage.addCharacter(character, CharacterType.DAD);
		currentStage.refresh();

		currentStage.getDad().playAnimation('intro');

		FlxTween.tween(PlayState.instance.camHUD, {alpha: 0}, 1);
		new FlxTimer().start(1, function(tmr) {
			PlayState.instance.tweenCameraZoom(currentStage.camZoom * 1.2, 2, true, FlxEase.quadInOut);
		});

		new FlxTimer().start(3, function(tmr) {
			trace('Begin countdown');
			PlayState.instance.tweenCameraZoom(currentStage.camZoom * 1, 2, true, FlxEase.quadInOut);
			PlayState.instance.startCountdown();
			FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 1);
		});

		new FlxTimer().start(3, function(tmr) {
			currentStage.getDad().destroy();
			var character = CharacterDataParser.fetchCharacter('parents-christmas');
			currentStage.addCharacter(character, CharacterType.DAD);
			currentStage.refresh();
		});
	}

	public override function isSongNew(currentDifficulty:String, currentVariation:String):Bool {
		if (currentVariation == 'pico')
			return !Save.instance.hasBeatenSong(this.id, null, 'pico');

		return false;
	}

	public override function listAltInstrumentalIds(difficultyId:String, variationId:String):Array<String> {
		if (difficultyId == 'easy' || difficultyId == 'normal' || difficultyId == 'hard') {
			var hasBeatenPicoMix = Save.instance.hasBeatenSong(this.id, null, 'pico');

			switch (variationId) {
				case 'pico':
					// return hasBeatenPicoMix ? [''] : [];
					// No Pico mix on BF instrumental, sorry!
					return [];
				default:
					return hasBeatenPicoMix ? ['pico'] : [];
			}
		}

		return [];
	}

	function onSongRetry(event:ScriptEvent) {
		super.onSongRetry(event);
	}

	function onUpdate(event:UpdateScriptEvent) {
		super.onUpdate(event);
	}

	/**
	 * Replay the cutscene after leaving the song.
	 */
	function onCreate(event:ScriptEvent):Void {
		super.onCreate(event);
	}
}
