import funkin.play.song.Song;
import funkin.play.PlayState;
import funkin.play.cutscene.VideoCutscene;
import funkin.save.Save;
import funkin.play.PlayStatePlaylist;

import flixel.util.FlxTimer;

import funkin.play.character.CharacterType;
import funkin.play.character.CharacterDataParser;

import funkin.audio.FunkinSound;

class LitUpSong extends Song {
	public function new() {
		super('lit-up');
	}
	
	public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);

		if (currentStage.getBoyfriend() == null)
		{
			trace('No BF to focus on. Cutscene won\'t work properly. Skipping...');
			return;
		}
		
		if (PlayState.instance.currentVariation == 'bf')
		{

			new FlxTimer().start(.1, function(tmr) {
				PlayState.instance.currentStage.getBoyfriend().playAnimation('hey', true);

				FunkinSound.playOnce(Paths.sound('week1/hey'), 1);
			});

		} else {
			var offsetX = -30;

			PlayState.instance.currentStage.getBoyfriend().destroy();
			character = CharacterDataParser.fetchCharacter('pico-cutscene');
			PlayState.instance.currentStage.addCharacter(character, CharacterType.BF);
			PlayState.instance.currentStage.refresh();
			PlayState.instance.currentStage.getBoyfriend().x += offsetX;
			PlayState.instance.currentStage.getBoyfriend().playAnimation('pissed');

			new FlxTimer().start(2, function(tmr) {
				PlayState.instance.currentStage.getBoyfriend().playAnimation('unpissed', true);
			});

			new FlxTimer().start(4, function(tmr) {
				PlayState.instance.currentStage.getBoyfriend().destroy();
				character = CharacterDataParser.fetchCharacter('pico-playable');
				PlayState.instance.currentStage.addCharacter(character, CharacterType.BF);
				PlayState.instance.currentStage.refresh();
				PlayState.instance.currentStage.getBoyfriend().x -= offsetX;
				PlayState.instance.currentStage.getBoyfriend().playAnimation('pissed');
			});
		};
	}

	public override function isSongNew(currentDifficulty:String, currentVariation:String):Bool {
		if (currentVariation == 'bf')
			return !Save.instance.hasBeatenSong(this.id, null, 'bf');

		return false;
	}

	public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		if (showLocked || Save.instance.hasBeatenLevel('weekend1')) {
			return super.listDifficulties(variationId, variationIds);
		}

		// Hide all difficulties if the player has not beaten the week.
		return [];
	}

	public override function listAltInstrumentalIds(difficultyId:String, variationId:String):Array<String> {
		// NOTE: Lit Up (BF Mix) is incompatible with the base song, so this should always be empty.
		return [];
	}
}
